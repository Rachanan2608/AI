# Facts and Rules Definitions

# Known facts (we define some facts initially, and some facts will be inferred)
facts = {
    "Food(Apples)": True,
    "Food(Chicken)": True,
    "Eats(Bill, Peanuts)": True,
    "KilledBy(Bill, Peanuts)": False,
}

# Forward Chaining: Rules and logic to deduce new facts
def forward_chaining(facts):
    # Rule 1: If Bill eats something and isn't killed by it, it's food
    def rule1():
        if "Eats(Bill, Peanuts)" in facts and "KilledBy(Bill, Peanuts)" in facts:
            if facts["Eats(Bill, Peanuts)"] and not facts["KilledBy(Bill, Peanuts)"]:
                facts["Food(Peanuts)"] = True
    
    # Rule 2: John likes all kinds of food
    def rule2():
        if "Food(Peanuts)" in facts:
            facts["Likes(John, Peanuts)"] = True

    # Apply forward chaining rules
    rule1()  # Check if Peanuts are food based on Bill's actions
    rule2()  # Check if John likes Peanuts based on food status

    return facts

# Backward Chaining: Trying to prove the goal using the facts
def backward_chaining(goal, facts):
    # Check if the goal is already known in facts
    if goal in facts:
        return facts[goal]

    # If the goal is "Likes(John, Peanuts)", we need to prove "Food(Peanuts)"
    if goal == "Likes(John, Peanuts)":
        # Step 1: Prove "Food(Peanuts)"
        if backward_chaining("Food(Peanuts)", facts):
            facts["Likes(John, Peanuts)"] = True
            return True
        else:
            return False

    # If the goal is "Food(Peanuts)", we need to prove it based on Bill's action
    if goal == "Food(Peanuts)":
        if "Eats(Bill, Peanuts)" in facts and "KilledBy(Bill, Peanuts)" in facts:
            if facts["Eats(Bill, Peanuts)"] and not facts["KilledBy(Bill, Peanuts)"]:
                facts["Food(Peanuts)"] = True
                return True
        return False

    return False

# Apply Forward Chaining
facts_forward = facts.copy()
facts_forward = forward_chaining(facts_forward)
print("Forward Chaining: Likes(John, Peanuts) =", facts_forward.get("Likes(John, Peanuts)", False))

# Apply Backward Chaining
facts_backward = facts.copy()
result_backward = backward_chaining("Likes(John, Peanuts)", facts_backward)
print("Backward Chaining: Likes(John, Peanuts) =", result_backward)
